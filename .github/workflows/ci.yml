name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

env:
  RUST_LOG: info
  RUST_BACKTRACE: 1

jobs:
  # ...
  test-versions:
    name: Test Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # if you have an MSRV, you can of course include it here too.
        rust: [stable, beta, nightly]
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      # You may want to test other featuresets here...
      - run: cargo test --verbose --workspace --all-features
      - run: cargo test --verbose --workspace --no-default-features
      # ...
  miri-test:
    name: Test with miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly
          components: miri
      - run: cargo miri test --verbose --no-default-features
      - run: cargo miri test --verbose --all-features
      # ...
  clippy:
    name: Lint with Clippy
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          components: clippy
      - run: cargo clippy --workspace --all-targets --verbose --no-default-features
      - run: cargo clippy --workspace --all-targets --verbose --all-features
      # ...
# ...
  rustfmt:
    name: Verify code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check
  codecov-tarpaulin:
    name: Generate code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
      # Note: If you need to combine the coverage info of multiple
      # feature sets, you need a `.tarpaulin.toml` config file, see
      # the link above for those docs.
      - uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.22.0'
          args: --all-features
      # Note: closed-source code needs to provide a token,
      # but open source code does not.
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1